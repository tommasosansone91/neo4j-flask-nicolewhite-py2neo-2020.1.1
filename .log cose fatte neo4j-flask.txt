conda create -n env_udemy_lask_neo4j

conda activate env_udemy_lask_neo4j

cd "C:\Users\Tommaso\Django rest framework\Udemy Django\Building_Web_Apps_Using_Flask_and_Neo4j_Working_Files\neo4j-flask-project"


per aprire la python shell da Anaconda devi fare solo:
python


vai in neo4j
disabilita la modalità offlin dai settings, poi esci e rientra


creo il db


nome DBMS
Neo4j


pw
Neo4j


accendo il db (start)

open

me lo apre nel server nativo



-------

Neo4j


http://localhost:7474/browser/


from py2neo import Graph

graph = Graph("bolt://localhost:7687", user="neo4j", password="Neo4j")

perchè di default user e pw(ma di cosa???) sono entrambi: neo4j


>>> graph
Graph('bolt://neo4j@localhost:7687')


graph.delete_all()


from py2neo import Graph, Node
nicole = Node("Person", name="Nicole", age=24) 
# crea forzatamente senza considerare se c'è già

graph.create(nicole)

ritorna tutto:
MATCH (n) RETURN (n)


>>> kingfish = Node("Bar", name="Kingfish")
>>> kingfish
Node('Bar', name='Kingfish')
>>> graph.create(kingfish)
>>> from py2neo import Relationship
rel = Relationship(nicole, "LIKES", kingfish)
>>> rel = Relationship(nicole, "LIKES", kingfish, since=2014)
>>> graph.create(rel)

essendo 
>>> nicole
Node('person', age=24, name='Nicole')

ora faccio
nicole = graph.merge_one("Person", "name", "Nicole") #deprecato

nicole = graph.merge(nicole, "Person", "name")
cerca un nodo di tipo Person, il cui name è Nicole
e se non lo trova lo aggiunge al grafico

kenny = Node("Person", name="Kenny")
Kenny = graph.merge(kenny, "Person", "name") # al posto di create
graph.create(kenny)


rimpiazzare find_one
from py2neo import NodeMatcher
matcher = NodeMatcher(graph)
kingfish = matcher.match('Bar', name='Kingfish').first()

>>> kingfish
Node('Bar', name='Kingfish')

quindi questo non aggiunge nodi al grafo


se ora faccio graph.create(kingfish)
non aggiunge nodi perchè kingfish è un nodo già esistente (lo sostituisce con lo stesso?)




matcher = NodeMatcher(graph)
kenny = matcher.match('Person', name='Kenny').first()
graph.delete(kenny)



richiamo i vecchi nodi
nicole = matcher.match('Person', name='Nicole').first()
kingfish = matcher.match('Bar', name='Kingfish').first()
kenny = matcher.match('Person', name='Kenny').first()



rel = Relationship(kenny, "LIKES", kingfish)
graph.create_unique(rel)# deprecato

rel = Relationship(kenny, "LIKES", kingfish)
graph.merge(rel)



----------------


graph.delete_all


MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN p.name AS name, m.title AS movie LIMIT 5

graph.cypher.execute
graph.run("MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN p.name AS name, m.title AS movie LIMIT 5")

data = graph.run("MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN p.name AS name, m.title AS movie LIMIT 5")

>>> for row in data:
...     print( row["name"], row["movie"])
...

Joel Silver The Matrix
Joel Silver The Matrix Reloaded
Joel Silver The Matrix Revolutions
Cameron Crowe Jerry Maguire
Nora Ephron When Harry Met Sally


se salvo la variabile data
poi faccio for row in data print
alla fine nella variabile data non ci sarà piu un valore :(

>>> data = graph.run("MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN p.name AS name, m.title AS movie LIMIT 5")
>>> for row in data:
...     print( row["name"]," | ", row["movie"])
...
Joel Silver  |  The Matrix
Joel Silver  |  The Matrix Reloaded
Joel Silver  |  The Matrix Revolutions
Cameron Crowe  |  Jerry Maguire
Nora Ephron  |  When Harry Met Sally
>>> data
(No data)

parametrized cypher queries
----------------------------

query = "MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.title = $movie RETURN p.name"
graph.run(query, {"movie": "The Matrix"})

data = graph.run("MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN p,m")



-----------

cancella tutto

MATCH (n)
DETACH DELETE n

----------

capitolo 6


copiaincollati i files da risorse Udemy

pip install bcrypt

pip install passlib

sostituisco in tutti i files

# graph = Graph()
con
graph = Graph("bolt://localhost:7687", user="neo4j", password="Neo4j")


-----------